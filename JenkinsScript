pipeline {
    agent any

    environment {
        NETLIFY_SITE_ID = 'd72e93bf-7f3a-432b-9c5f-71adb5f72c77'
        NETLIFY_AUTH_TOKEN = 'nfp_tVmKvdMgKMHvuTEXVcoNWm6Tpcds9RWYd3aa'
        SONARQUBE_URL = 'http://localhost:9000'  // The name set for your SonarQube server
        SONARQUBE_SCANNER = 'SonarQube-Scanner'  // The name of the SonarQube scanner
        DATADOG_API_KEY = '1e2c1adcabad6f79f9fdf81c915973b7'
    }

    tools {
        maven 'M3'
    }

    stages {
        stage('Declarative: Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/CodeSnake-wq/SIT223_6.2hd.git', branch: 'main'
                }
            }
        }

        stage('Build Image') {
            steps {
                script {
                    bat 'docker build -t aakash:1.0 .'
                }
            }
        }

        stage('Deploy to Test Environment') {
            steps {
                script {
                    bat 'docker-compose down || true'  // Stop any previous instance
                    bat 'docker-compose up -d'         // Start the container in detached mode
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    bat 'npm install'

                    // Start the application in a new terminal
                    bat 'start cmd /c "npm start"'

                    // Run Selenium tests in a separate terminal
                    bat 'start cmd /c "node tests/selenium.test.js"'

                    // Wait for a few seconds using sleep
                    sleep(time: 10, unit: 'SECONDS')
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    bat 'npm run build'
                }
            }
        }

        // Code Quality Analysis using SonarQube
        stage('Code Quality Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv('SonarQube-Server') {
                    bat """
                    mvn sonar:sonar -Dsonar.projectKey=Task_6.2HD -Dsonar.sources=. -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=sqp_dca8da7bbb9e545340388e58a190be3e97045107
                    """}
                }
            }
        }

        stage('Deploy to Netlify') {
            steps {
                script {
                    bat """
                    npx netlify deploy --dir=./build --prod --auth=${NETLIFY_AUTH_TOKEN} --site=${NETLIFY_SITE_ID}
                    """
                }
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                script {
                    // Assuming Datadog agent and monitoring are already set up in production.
                    echo 'Monitoring the production application using Datadog'

                    bat """
                    curl -X POST -H "Content-type: application/json" ^
                    -H "DD-API-KEY: ${DATADOG_API_KEY}" ^
                    -d "{ \\"title\\": \\"Jenkins Deployment\\", \\"text\\": \\"A deployment has occurred on the production server.\\", \\"priority\\": \\"normal\\", \\"tags\\": [\\"env:production\\", \\"team:devops\\"] }" ^
                    https://api.datadoghq.com/api/v1/events
                    """
                }
            }
        }

    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        failure {
            echo 'Pipeline failed. Please check logs for details.'
        }
    }
}
